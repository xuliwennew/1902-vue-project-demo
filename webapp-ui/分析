

1. 需求分析 (信息) 确定哪些东西是要做的，那些东西是不做
   1.1 统计需要结算的价格
   1.2 可以根据选择的店铺进行单独结算
   1.3 可以单独选一个店铺的一个商品进行结算
   1.4 可以全选进行结算
   1.5 可以修改商品的件数，价格随件数变化修改
   1.6 可以删除这个商品，价格变化
   1.7 购物车中的修改是由当前的登录用户获取的


2. 概要设计
   结算算法: 结算钱 = All .checked (product.price * product.num)
   单选:  以一个选择的值为标准，设计其它的选择的值 的结果
   全选:

   MVVM VUE

3. 详细设计
   3.1 算法设计
   3.2 页面数据模型 (找出不同的数据结构)
   购物车数据 : CartInfo
   用户数据 User { userid:number}
   店铺数据 Shop { 店铺名称 shopName:string ,总价格：}
   商品数据 Product {标题，价格，件数，属性}

   3.3 根据数据模型找出模型之间关系
   CartInfo->Shops(1-n)->Products(1-n)->User(1-1)
   cartInfo:{

       Shops:[
          {
             products:[

                {}
             ]
          }
       ]
   }

cartInfo { Shops[ shop products[product product]]}



   3.4 模拟接口数据

   3.5 组件设计
   reusable + indepent  + 业务模块

4. 编码
架构设计：前后台的分离项目
nodejs + mongodb + express
vue + component

前缀 + 页面组件名 + 模块名
头部  Jd + Cart + Header  cartHeader
       jd-cart
       jd-cart-header
       jd-cart-footer cartFooter
       jd-cart-shop-list
       jd-cart-shop
       jd-cart-shop-product-list
       jd-cart-shop-product



5. 测试
6. 上线布署
 
